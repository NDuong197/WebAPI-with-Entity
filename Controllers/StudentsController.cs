using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebAPI.Models;
using System.Threading.Tasks;
using WebAPI.Data;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StudentsController : ControllerBase
    {
        private readonly StudentContext _context;

        public StudentsController(StudentContext context)
        {
            _context = context;
        }

        [HttpPost("CreateStudent")]
        public async Task<IActionResult> CreateStudent(Student student)
        {
            try
            {
                if (student == null)
                {
                    return BadRequest("Student data is required.");
                }

                // Kiểm tra và loại bỏ giá trị Id nếu client gửi
                if (student.Id != 0) // Giả định Id = 0 khi không có giá trị từ client
                {
                    return BadRequest("Do not provide an Id. The Id is automatically generated by the database.");
                }

                if (string.IsNullOrWhiteSpace(student.Name) || student.Age < 0 || string.IsNullOrWhiteSpace(student.Class))
                {
                    return BadRequest("Invalid student data. Name, Age, and Class are required and Age must be non-negative.");
                }

                _context.Students.Add(student); // EF Core sẽ bỏ qua Id và để SQL Server tự tạo
                await _context.SaveChangesAsync();

                return Ok(new { message = "Student added successfully", student });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPut("UpdatePhoto/{id}")]
        public async Task<IActionResult> UpdatePhoto(int id, [FromBody] string base64ImageString)
        {
            // Tìm sinh viên trong cơ sở dữ liệu bằng ID
            var student = await _context.Students.FindAsync(id);

            if (student == null)
            {
                return NotFound(); // Trả về mã lỗi 404 nếu không tìm thấy sinh viên
            }

            // Kiểm tra xem base64ImageString có hợp lệ không
            if (string.IsNullOrWhiteSpace(base64ImageString))
            {
                return BadRequest("Base64 image string is required and cannot be empty.");
            }

            // Cập nhật trường Photo của sinh viên
            student.Photo = base64ImageString;

            // Lưu các thay đổi vào cơ sở dữ liệu
            try
            {
                await _context.SaveChangesAsync();
                return Ok(); // Trả về mã 200 OK khi cập nhật thành công
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}